# RUN: llc -O3 -x=mir -start-before=msp430-nemesis-defender -msp430-nemesis-defender-enable=true -verify-machineinstrs -o - %s | FileCheck %s

--- |
  target triple = "msp430-unknown-unknown-elf"

  define i16 @foo(i16 "secret" %a, i16 %b) {
  entry:
    ret i16 0
  }

  ; Function Attrs: optsize
  declare i16 @bar(i16, i16)
...
---
name: foo
body:             |
  bb.0:
    successors: %bb.1, %bb.9
    PUSH16r killed $r10, implicit-def $sp, implicit $sp
    PUSH16r killed $r9, implicit-def $sp, implicit $sp
    PUSH16r killed $r8, implicit-def $sp, implicit $sp
    PUSH16r killed $r7, implicit-def $sp, implicit $sp
    PUSH16r killed $r6, implicit-def $sp, implicit $sp
    $r10 = MOV16rr $r13
    $r9 = MOV16rr $r12
    CMP16rr $r9, $r10, implicit-def $sr
    JCC %bb.9, 4, implicit $sr

  bb.1:
    $r8 = MOV16rc 0

  bb.2:
    successors: %bb.3, %bb.4
    CMP16ri $r9, 12, implicit-def $sr
    JCC %bb.4, 1, implicit $sr

  bb.3:
    $r12 = MOV16rr $r8
    $r13 = MOV16ri 513
    CALLi @bar, implicit-def dead $r11, implicit-def dead $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13

  bb.4:
    $r6 = MOV16rc 0

  bb.5:
    successors: %bb.6(0x04000000), %bb.5(0x7c000000)
    $r12 = MOV16rr $r8
    $r13 = MOV16rr $r6
    CALLi @bar, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13
    $r7 = MOV16rr $r12
    $r6 = nuw nsw ADD16rc killed $r6, 1, implicit-def dead $sr
    CMP16ri $r6, 513, implicit-def $sr
    JCC %bb.5, 1, implicit $sr

  bb.6:
    successors: %bb.7, %bb.8
    CMP16ri $r10, 12, implicit-def $sr
    JCC %bb.8, 1, implicit $sr

  bb.7:
    $r12 = MOV16rr $r7
    $r13 = MOV16rr $r7
    CALLi &__mspabi_mpyi, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13
    $r13 = MOV16rr $r12
    $r12 = MOV16rr killed $r7
    CALLi @bar, implicit-def dead $r11, implicit-def dead $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13

  bb.8:
    successors: %bb.9(0x04000000), %bb.2(0x7c000000)
    $r8 = nuw nsw ADD16rc killed $r8, 1, implicit-def dead $sr
    CMP16ri $r8, 1023, implicit-def $sr
    JCC %bb.2, 1, implicit $sr

  bb.9:
    $r12 = MOV16ri 3
    $r6 = POP16r implicit-def $sp, implicit $sp
    $r7 = POP16r implicit-def $sp, implicit $sp
    $r8 = POP16r implicit-def $sp, implicit $sp
    $r9 = POP16r implicit-def $sp, implicit $sp
    $r10 = POP16r implicit-def $sp, implicit $sp
    RET implicit $r12

  ; CHECK-LABEL: foo:
  ; CHECK-NEXT: ; %bb.0:
  ; CHECK-NEXT: 	push	r10
  ; CHECK-NEXT: 	push	r9
  ; CHECK-NEXT: 	push	r8
  ; CHECK-NEXT: 	push	r7
  ; CHECK-NEXT: 	push	r6
  ; CHECK-NEXT: 	mov	r13, r10
  ; CHECK-NEXT: 	mov	r12, r9
  ; CHECK-NEXT: 	cmp	r10, r9
  ; CHECK-NEXT: 	jge	.LBB0_10
  ; CHECK-NEXT: 	jmp	.LBB0_1
  ; CHECK-NEXT: .LBB0_1:
  ; CHECK-NEXT: 	clr	r8
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_24
  ; CHECK-NEXT: .LBB0_2:
  ; CHECK:      	cmp	#12, r9
  ; CHECK-NEXT: 	jne	.LBB0_12
  ; CHECK-NEXT: 	jmp	.LBB0_3
  ; CHECK-NEXT: .LBB0_3:
  ; CHECK-NEXT: 	mov	r8, r12
  ; CHECK-NEXT: 	mov	#513, r13
  ; CHECK-NEXT: 	call	#_nds_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: .LBB0_4:
  ; CHECK-NEXT: 	clr	r6
  ; CHECK-NEXT: 	jmp	.LBB0_21
  ; CHECK-NEXT: .LBB0_5:
  ; CHECK:      	mov	#42, r3
  ; CHECK-NEXT: 	mov	r8, r12
  ; CHECK-NEXT: 	mov	r6, r13
  ; CHECK-NEXT: 	call	#_nds_bar
  ; CHECK-NEXT: 	mov	r12, r7
  ; CHECK-NEXT: 	inc	r6
  ; CHECK-NEXT: 	cmp	#513, r6
  ; CHECK-NEXT: 	jne	.LBB0_5
  ; CHECK-NEXT: 	jmp	.LBB0_22
  ; CHECK-NEXT: .LBB0_6:
  ; CHECK-NEXT: 	cmp	#12, r10
  ; CHECK-NEXT: 	jne	.LBB0_13
  ; CHECK-NEXT: 	jmp	.LBB0_7
  ; CHECK-NEXT: .LBB0_7:
  ; CHECK-NEXT: 	mov	r7, r12
  ; CHECK-NEXT: 	mov	r7, r13
  ; CHECK-NEXT: 	call	#_nds___mspabi_mpyi
  ; CHECK-NEXT: 	mov	r12, r13
  ; CHECK-NEXT: 	mov	r7, r12
  ; CHECK-NEXT: 	call	#_nds_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: .LBB0_8:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	inc	r8
  ; CHECK-NEXT: 	cmp	#1023, r8
  ; CHECK-NEXT: 	jne	.LBB0_2
  ; CHECK-NEXT: 	jmp	.LBB0_25
  ; CHECK-NEXT: .LBB0_9:
  ; CHECK-NEXT: 	mov	#3, r12
  ; CHECK-NEXT: 	pop	r6
  ; CHECK-NEXT: 	pop	r7
  ; CHECK-NEXT: 	pop	r8
  ; CHECK-NEXT: 	pop	r9
  ; CHECK-NEXT: 	pop	r10
  ; CHECK-NEXT: 	ret
  ; CHECK-NEXT: .LBB0_10:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_11
  ; CHECK-NEXT: .LBB0_11:
  ; CHECK-NEXT: 	push	r10
  ; CHECK-NEXT: 	clr	r10
  ; CHECK-NEXT: 	jmp	.LBB0_14
  ; CHECK-NEXT: .LBB0_12:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	call	#_ndd_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_4
  ; CHECK-NEXT: .LBB0_13:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	call	#_ndd___mspabi_mpyi
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	call	#_ndd_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_8
  ; CHECK-NEXT: .LBB0_14:
  ; CHECK:      	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	call	#_ndd_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	jmp	.LBB0_17
  ; CHECK-NEXT: .LBB0_15:
  ; CHECK-NEXT: 	inc	r10
  ; CHECK-NEXT: 	cmp	#1023, r10
  ; CHECK-NEXT: 	jl	.LBB0_14
  ; CHECK-NEXT: 	jmp	.LBB0_16
  ; CHECK-NEXT: .LBB0_16:
  ; CHECK-NEXT: 	pop	r10
  ; CHECK-NEXT: 	jmp	.LBB0_9
  ; CHECK-NEXT: .LBB0_17:
  ; CHECK-NEXT: 	push	r10
  ; CHECK-NEXT: 	clr	r10
  ; CHECK-NEXT: 	jmp	.LBB0_18
  ; CHECK-NEXT: .LBB0_18:
  ; CHECK:      	jmp	.LBB0_19
  ; CHECK-NEXT: .LBB0_19:
  ; CHECK-NEXT: 	inc	r10
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	call	#_ndd_bar
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	cmp	#513, r10
  ; CHECK-NEXT: 	jl	.LBB0_18
  ; CHECK-NEXT: 	jmp	.LBB0_20
  ; CHECK-NEXT: .LBB0_20:
  ; CHECK-NEXT: 	pop	r10
  ; CHECK-NEXT: 	jmp	.LBB0_23
  ; CHECK-NEXT: .LBB0_21:
  ; CHECK-NEXT: 	mov	2(r0), r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	jmp	.LBB0_5
  ; CHECK-NEXT: .LBB0_22:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_6
  ; CHECK-NEXT: .LBB0_23:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	call	#_ndd___mspabi_mpyi
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	call	#_ndd_bar
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_15
  ; CHECK-NEXT: .LBB0_24:
  ; CHECK-NEXT: 	mov	2(r0), r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	jmp	.LBB0_2
  ; CHECK-NEXT: .LBB0_25:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_9
  ; CHECK-NEXT: .Lfunc_end0:
...
