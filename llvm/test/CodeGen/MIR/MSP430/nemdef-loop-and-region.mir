# RUN: llc -O3 -x=mir -start-before=msp430-nemesis-defender -msp430-nemesis-defender-enable=true -verify-machineinstrs -o - %s | FileCheck %s

--- |
  target triple = "msp430-unknown-unknown-elf"

  define i16 @foo(i16 "secret" %a, i16 %b) {
  entry:
    ret i16 0
  }

  declare i16 @bar(i16)
...
---
name: foo
body: |
  bb.0:
    successors: %bb.1(0x50000000), %bb.5(0x30000000)
    PUSH16r killed $r10, implicit-def $sp, implicit $sp
    PUSH16r killed $r9, implicit-def $sp, implicit $sp
    PUSH16r killed $r8, implicit-def $sp, implicit $sp
    PUSH16r killed $r7, implicit-def $sp, implicit $sp
    $r10 = MOV16rr $r13
    $r9 = MOV16rr $r12
    $r8 = MOV16rc 1
    CMP16rc $r10, 1, implicit-def $sr
    JCC %bb.5, 5, implicit $sr

  bb.1:
    $r7 = MOV16rc 0

  bb.2:
    successors: %bb.3, %bb.4
    $r12 = MOV16rr $r9
    $r13 = MOV16rr $r7
    CALLi &__mspabi_remi, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13
    CMP16ri killed $r12, 3, implicit-def $sr
    $r12 = MOV16rr $r10
    JCC %bb.4, 5, implicit $sr

  bb.3:
    $r12 = MOV16rc 2

  bb.4:
    successors: %bb.5(0x04000000), %bb.2(0x7c000000)
    CALLi @bar, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12
    $r13 = MOV16rr killed $r8
    CALLi &__mspabi_mpyi, implicit-def dead $r11, implicit-def $r12, implicit-def dead $r13, implicit-def dead $r14, implicit-def dead $r15, implicit-def dead $sr, implicit $sp, implicit $r12, implicit $r13
    $r8 = MOV16rr $r12
    $r7 = nuw nsw ADD16rc killed $r7, 1, implicit-def dead $sr
    CMP16rr $r10, $r7, implicit-def $sr
    JCC %bb.2, 1, implicit $sr

  bb.5:
    $r12 = MOV16rr killed $r8
    $r7 = POP16r implicit-def $sp, implicit $sp
    $r8 = POP16r implicit-def $sp, implicit $sp
    $r9 = POP16r implicit-def $sp, implicit $sp
    $r10 = POP16r implicit-def $sp, implicit $sp
    RET implicit $r12

  ; CHECK-LABEL: foo:
  ; CHECK-NEXT: ; %bb.0:
  ; CHECK-NEXT: 	push	r10
  ; CHECK-NEXT: 	push	r9
  ; CHECK-NEXT: 	push	r8
  ; CHECK-NEXT: 	push	r7
  ; CHECK-NEXT: 	mov	r13, r10
  ; CHECK-NEXT: 	mov	r12, r9
  ; CHECK-NEXT: 	mov	#1, r8
  ; CHECK-NEXT: 	cmp	#1, r10
  ; CHECK-NEXT: 	jl	.LBB0_5
  ; CHECK-NEXT: ; %bb.1:
  ; CHECK-NEXT: 	clr	r7
  ; CHECK-NEXT: .LBB0_2:
  ; CHECK-NEXT: 	mov	r9, r12
  ; CHECK-NEXT: 	mov	r7, r13
  ; CHECK-NEXT: 	call	#__mspabi_remi
  ; CHECK-NEXT: 	cmp	#3, r12
  ; CHECK-NEXT: 	mov	r10, r12
  ; CHECK-NEXT: 	jl	.LBB0_6
  ; CHECK-NEXT: 	jmp	.LBB0_3
  ; CHECK-NEXT: .LBB0_3:
  ; CHECK-NEXT: 	mov	#2, r12
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: .LBB0_4:
  ; CHECK-NEXT: 	call	#bar
  ; CHECK-NEXT: 	mov	r8, r13
  ; CHECK-NEXT: 	call	#__mspabi_mpyi
  ; CHECK-NEXT: 	mov	r12, r8
  ; CHECK-NEXT: 	inc	r7
  ; CHECK-NEXT: 	cmp	r7, r10
  ; CHECK-NEXT: 	jne	.LBB0_2
  ; CHECK-NEXT: .LBB0_5:
  ; CHECK-NEXT: 	mov	r8, r12
  ; CHECK-NEXT: 	pop	r7
  ; CHECK-NEXT: 	pop	r8
  ; CHECK-NEXT: 	pop	r9
  ; CHECK-NEXT: 	pop	r10
  ; CHECK-NEXT: 	ret
  ; CHECK-NEXT: .LBB0_6:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_4
  ; CHECK-NEXT: .Lfunc_end0:
...
