# RUN: llc -O3 -x=mir -start-before=msp430-nemesis-defender -msp430-nemesis-defender-enable=true -verify-machineinstrs -o - %s | FileCheck %s

--- |
  target triple = "msp430-unknown-unknown-elf"

  define i16 @foo(i16 "secret" %a, i16 %b, i16 %c) {
  entry:
    ret i16 0
  }
...
---
name: foo
body: |
  bb.0:
    successors: %bb.1, %bb.2
    $r15 = MOV16rr $r12
    $r12 = MOV16ri 7
    CMP16rr $r13, $r14, implicit-def $sr
    JCC %bb.1, 4, implicit $sr

  bb.2:
    successors: %bb.3, %bb.4
    CMP16rr killed $r15, $r13, implicit-def $sr
    JCC %bb.3, 1, implicit $sr

  bb.4:
    successors: %bb.5, %bb.6
    $r15 = MOV16rc 1
    CMP16rr killed $r13, killed $r14, implicit-def $sr
    JCC %bb.5, 4, implicit $sr

  bb.6:
    successors: %bb.7, %bb.8
    CMP8ri $r15b, 0, implicit-def $sr
    JCC %bb.8, 0, implicit $sr

  bb.7:
    successors: %bb.8
    $r12 = ADD16rr killed $r12, $r12, implicit-def $sr
    $r15b = SUB8ri $r15b, 1, implicit-def $sr, implicit killed $r15, implicit-def $r15

  bb.8:
    RET implicit $r12

  bb.1:
    successors: %bb.3, %bb.4
    $r12 = MOV16ri 3
    CMP16rr killed $r15, $r13, implicit-def $sr
    JCC %bb.4, 0, implicit $sr

  bb.3:
    successors: %bb.5, %bb.6
    $r12 = MOV16ri 3
    $r15 = MOV16rc 1
    CMP16rr killed $r13, killed $r14, implicit-def $sr
    JCC %bb.6, 5, implicit $sr

  bb.5:
    successors: %bb.7, %bb.8
    $r15 = MOV16rc 0
    CMP8ri $r15b, 0, implicit-def $sr
    JCC %bb.7, 1, implicit $sr
    JMP %bb.8

  ; CHECK-LABEL: foo:
  ; CHECK-NEXT: ; %bb.0:
  ; CHECK-NEXT: 	mov	r12, r15
  ; CHECK-NEXT: 	mov	#7, r12
  ; CHECK-NEXT: 	cmp	r14, r13
  ; CHECK-NEXT: 	jge	.LBB0_6
  ; CHECK-NEXT: ; %bb.1:
  ; CHECK-NEXT: 	cmp	r13, r15
  ; CHECK-NEXT: 	jne	.LBB0_7
  ; CHECK-NEXT: ; %bb.2:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#1, r15
  ; CHECK-NEXT: 	cmp	r14, r13
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jge	.LBB0_8
  ; CHECK-NEXT: .LBB0_3:
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	cmp.b	#0, r15
  ; CHECK-NEXT: 	jeq	.LBB0_9
  ; CHECK-NEXT: 	jmp	.LBB0_4
  ; CHECK-NEXT: .LBB0_4:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	add	r12, r12
  ; CHECK-NEXT: 	sub.b	#1, r15
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: .LBB0_5:
  ; CHECK-NEXT: 	ret
  ; CHECK-NEXT: .LBB0_6:
  ; CHECK-NEXT: 	mov	#3, r12
  ; CHECK-NEXT: 	cmp	r13, r15
  ; CHECK-NEXT: 	jeq	.LBB0_11
  ; CHECK-NEXT: 	jmp	.LBB0_10
  ; CHECK-NEXT: .LBB0_7:
  ; CHECK-NEXT: 	mov	#3, r12
  ; CHECK-NEXT: 	mov	#1, r15
  ; CHECK-NEXT: 	cmp	r14, r13
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jl	.LBB0_3
  ; CHECK-NEXT: .LBB0_8:
  ; CHECK-NEXT: 	clr	r15
  ; CHECK-NEXT: 	cmp.b	#0, r15
  ; CHECK-NEXT: 	jne	.LBB0_4
  ; CHECK-NEXT: 	jmp	.LBB0_9
  ; CHECK-NEXT: .LBB0_9:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_5
  ; CHECK-NEXT: .LBB0_10:
  ; CHECK-NEXT: 	mov	#3, r12
  ; CHECK-NEXT: 	mov	#1, r15
  ; CHECK-NEXT: 	cmp	r14, r13
  ; CHECK-NEXT: 	jl	.LBB0_13
  ; CHECK-NEXT: 	jmp	.LBB0_12
  ; CHECK-NEXT: .LBB0_11:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#1, r15
  ; CHECK-NEXT: 	cmp	r14, r13
  ; CHECK-NEXT: 	jge	.LBB0_12
  ; CHECK-NEXT: 	jmp	.LBB0_13
  ; CHECK-NEXT: .LBB0_12:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	clr	r15
  ; CHECK-NEXT: 	cmp.b	#0, r15
  ; CHECK-NEXT: 	jne	.LBB0_14
  ; CHECK-NEXT: 	jmp	.LBB0_15
  ; CHECK-NEXT: .LBB0_13:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	cmp.b	#0, r15
  ; CHECK-NEXT: 	jeq	.LBB0_15
  ; CHECK-NEXT: 	jmp	.LBB0_14
  ; CHECK-NEXT: .LBB0_14:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	add	r12, r12
  ; CHECK-NEXT: 	sub.b	#1, r15
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_5
  ; CHECK-NEXT: .LBB0_15:
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	nop
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	mov	#42, r3
  ; CHECK-NEXT: 	jmp	.LBB0_5
  ; CHECK-NEXT: .Lfunc_end0:
...
